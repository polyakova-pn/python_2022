import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sympy import solve, Symbol

def grav_potencial(point_m_vec, m):
    '''считает грав потенциал от массы m в точке, вектор из которой в массу m - point_m_vec'''
    G = 6.67 * 10 ** (-11)
    pot = -1 * G * m / (np.dot(point_m_vec, point_m_vec)) ** 0.5
    return pot

def centr_potetial(point, T, a, m1, m2):
    '''считает центробежный потенциал от массы m в точке, радиус вектор которой - point'''
    omega = 2 * np.pi / T
    A_sht_vec = np.array([a * m2 / (m1 + m2), 0, 0])
    vec = point * np.array([1, 1, 0]) - A_sht_vec
    pot = -1 * abs(np.dot(vec, vec)) * omega ** 2 / 2
    return pot

def total_potential(point, m1, m2, a):
    '''считает суммарный потенциал в точке point'''
    G = 6.67 * 10 ** (-11)
    a = a * 150000000000
    m1 = m1 * 2 * 10 ** 30
    m2 = m2 * 2 * 10 ** 30
    #T = 2 * np.pi * (a ** 3/ G / (m1 + m2)) ** 0.5
    T = 2 * np.pi * (a ** 3 / (m1 + m2) / G) ** 0.5
    pot = grav_potencial(point, m1) + grav_potencial(point - np.array([a, 0, 0]), m2) + centr_potetial(point, T, a, m1,                                                                                        m2)
    return pot


def pole_(limit, step, m1, m2, a):
    '''создает поле (трехмерный массив из потенциалов размером 2а * 2а вокруг звезды с размером ячейки, приближающей точку step)'''
    pole_ = []
    diapozon = np.arange(-limit, limit, step)
    for x in diapozon:
        pole_.append([])
        ix = int(x / step + limit / step)
        for y in diapozon:
            pole_[ix].append([])
            iy = int(y / step + limit / step)
            for z in diapozon:
                iz = z / step + limit / step
                const = 150000000000
                pole_[ix][iy].append(total_potential(const * np.array([x, y, z]), m1, m2, a))
    return pole_

def solving_x3(b1, b2, b3, a):
    ''' решает уравнение для нахождения расстояния до точки лагранжа L1(бин поиск)'''
    beg = 0
    end = a
    for i in range(100):
        x = (end + beg) / 2
        if b1 / (x ** 2) + b2 / ((a - x) ** 2) + (x - a * m2 / (m1 + m2)) * b3 < 0:
            beg = (end + beg) / 2
        else:
            end = (end + beg) / 2
    return beg


def L1_potential(m1, m2, a):
    ''' считает потенциал точки L1 и возвращает расстоние до нее'''
    G = 6.67 * 10 ** (-11)
    av = a * 150000000000
    m1v = m1 * 2 * 10 ** 30
    m2v = m2 * 2 * 10 ** 30
    omega = 1 / (av ** 3 / (m1v + m2v) / G) ** 0.5
    par = G
    b1 = - 1 * m1v * par
    b2 = par * m2v
    b3 = omega ** 2
    l = solving_x3(b1, b2, b3, av) / 150000000000
    G = 6.67 * 10 ** (-11)
    a = a * 150000000000
    m1 = m1 * 2 * 10 ** 30
    m2 = m2 * 2 * 10 ** 30
    # T = 2 * np.pi * (a ** 3/ G / (m1 + m2)) ** 0.5
    T = 2 * np.pi * (a ** 3 / (m1 + m2) / G) ** 0.5
    point = np.array([l, 0, 0]) * 150000000000
    pot = grav_potencial(point, m1) + grav_potencial(point - np.array([a, 0, 0]), m2) + centr_potetial(point, T, a, m1, m2)
    return pot, l


def is_lobe(point, pole, LP1, tochnost):
    ''' проверяет, является ли точка point границей полости(сравнивая с потенциалом L1), учитывая точность определения границы полости и шаг отрисовки'''
    x = point[0]
    y = point[1]
    z = point[2]
    ix = int(x / step + limit / step)
    iy = int(y / step + limit / step)
    iz = int(z / step + limit / step)
    P = pole[ix][iy][iz]
    if pole[ix][iy][iz] < LP1 + tochnost:
        return 1
    else:
        return 0

def is_lobe_for_model(point, pole, LP1, tochnost):
    ''' проверяет, является ли точка point границей полости(сравнивая с потенциалом L1), учитывая точность определения границы полости и шаг отрисовки'''
    x = point[0]
    y = point[1]
    z = point[2]
    ix = int(x / step + limit / step)
    iy = int(y / step + limit / step)
    iz = int(z / step + limit / step)
    P = pole[ix][iy][iz]
    if pole[ix][iy][iz] < LP1 + tochnost and pole[ix][iy][iz] > LP1 - tochnost:
        return 1
    else:
        return 0


def lobe_(m1, m2, a, limit, step):
    ''' создает пространство точек со значением 1, если они часть полости и 0 если нет, создает масивы xg, yg, xg с координатами точек полости'''
    xg = []
    yg = []
    zg = []
    pole = pole_(limit, step, m1, m2, a)
    space = []
    lp1, l1 = L1_potential(m1, m2, a)
    l1_ = l1 + a / limit * step
    c = 150000000000
    tochnost = abs(total_potential(c * np.array([l1_, 0, 0]), m1, m2, a) - lp1) * 3 ** 0.5
    #print(tochnost)
    diapozon = np.arange(-limit, limit, step)
    for x in diapozon:
        space.append([])
        ix = int(x / step + limit / step)
        for y in diapozon:
            space[ix].append([])
            iy = int(y / step + limit / step)
            for z in diapozon:
                iz = int(z / step + limit / step)
                param = is_lobe(np.array([x, y, z]), pole, lp1, tochnost)
                if param == 1 and ix > limit // step / 3 and ix < (l1 + limit) / step:
                    xg.append(x)
                    yg.append(y)
                    zg.append(z)
                space[ix][iy].append(param)
    xg = np.array(xg)
    yg = np.array(yg)
    zg = np.array(zg)
    return space, xg, yg, zg, l1_


def lobe_for_model(m1, m2, a, limit, step):
    ''' создает пространство точек со значением 1, если они часть полости и 0 если нет, создает масивы xg, yg, xg с координатами точек полости'''
    xg = []
    yg = []
    zg = []
    pole = pole_(limit, step, m1, m2, a)
    space = []
    lp1, l1 = L1_potential(m1, m2, a)
    l1_ = l1 + a / limit * step
    c = 150000000000
    tochnost = abs(total_potential(c * np.array([l1_, 0, 0]), m1, m2, a) - lp1) * 3 ** 0.5
    #print(tochnost)
    diapozon = np.arange(-limit, limit, step)
    for x in diapozon:
        space.append([])
        ix = int(x / step + limit / step)
        for y in diapozon:
            space[ix].append([])
            iy = int(y / step + limit / step)
            for z in diapozon:
                iz = int(z / step + limit / step)
                param = is_lobe_for_model(np.array([x, y, z]), pole, lp1, tochnost)
                if param == 1 and ix > limit // step / 3:
                    xg.append(x)
                    yg.append(y)
                    zg.append(z)
                space[ix][iy].append(param)
    xg = np.array(xg)
    yg = np.array(yg)
    zg = np.array(zg)
    return space, xg, yg, zg, l1_
